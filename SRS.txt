2. 📦 SCOPE
--------------------------------------------------------
- Signup/Login using LocalStorage (client-side only for now) ✅
- Dashboard to adopt and track trees ⚠️ (Basic display implemented, CRUD pending)
- Tree data stored in LocalStorage (for now) ✅
- Public "Community Trees" feed in future ❌
- Fully responsive UI for mobile and desktop ⚠️ (Basic responsiveness in place)
- Can handle 500+ daily active users ❌ (Not applicable for client-side LocalStorage)

3. 👥 USER CLASSES
--------------------------------------------------------
• Regular User: ✅
  - Register/Login, adopt and manage trees

• Community Viewer (future): ❌
  - View other users' public trees

• Faculty/Moderator (future): ❌
  - Track and review user contributions

4. 📋 FUNCTIONAL REQUIREMENTS
--------------------------------------------------------

🔐 AUTHENTICATION (LocalStorage - Client-Side) ✅
  FR1: User can sign up with email/password (data stored in LocalStorage) ✅
  FR2: User can log in (authenticates against LocalStorage data) ✅
  FR3: Auth state persists between sessions (via LocalStorage) ✅
  FR4: User can log out ✅

🌿 PERSONAL DASHBOARD (My Trees) ⚠️
  FR5: Show user name & profile image (from LocalStorage, profile image is not implemented yet) ✅ (User name only)
  FR6: Adopt a tree (Name, Location, Date) - (Future) ❌
  FR7: View list of adopted trees - (Future) ❌
  FR8: Edit existing tree entry - (Future) ❌
  FR9: Delete existing tree entry - (Future) ❌
  FR10: User and tree data stored in LocalStorage (upgradable to Firestore) ✅

🌍 COMMUNITY TREE FEED (Future Scope) ❌
  FR11: Tab to view public trees from other users ❌
  FR12: Each public tree shows: ❌
        - Tree Name
        - Location
        - Adopted By (user)
        - Date Adopted
  FR13: Public/Private checkbox in adoption form ❌
  FR14: Filter/search by user or location (future) ❌

5. 🚫 NON-FUNCTIONAL REQUIREMENTS
--------------------------------------------------------
NFR1: Mobile-first responsive UI ⚠️ (Basic responsiveness in place)
NFR2: Load time < 2 seconds ✅ (For current client-side scope)
NFR3: Secure authentication and logout ⚠️ (Note: Current implementation uses LocalStorage, which is not secure for sensitive data like passwords in a real-world application. Hashing/server-side auth would be required for production.)
NFR4: Scalable to 500+ users ❌ (Not applicable for client-side LocalStorage)
NFR5: Smooth transitions/navigation ⚠️ (Basic navigation implemented)

6. 🛠️ TECHNOLOGY STACK
--------------------------------------------------------

Frontend      : HTML, CSS, JavaScript ✅
Auth Backend  : LocalStorage (client-side only for initial authentication) ✅
Data Storage  : LocalStorage (initial), Firestore (future) ✅
Hosting       : Firebase Hosting (optional) ⚠️ (Not currently using for hosting)

📂 CODEBASE STRUCTURE & MODULARITY ✅
--------------------------------------------------------
• Each major screen/feature will have: ✅
   → Its own separate HTML file ✅
   → Its own dedicated CSS file (in css/) ✅
   → Its own dedicated JS file (in js/) ✅

• Folder Organization: ✅
   ├── *.html          → All HTML files in root ✅
   ├── css/            → All feature-specific styles ✅
   ├── js/             → All feature-specific scripts ✅
   ├── assets/         → Images and static files ✅

• Master Files: ✅
   → index.html        → Splash Screen / Entry Point ✅
   → css/style.css     → Imports all other CSS files via @import ✅
   → js/script.js      → Acts as a central script, importing common or shared JS modules, but individual page-specific scripts should be loaded directly by their respective HTML files. ✅

• Benefits: ✅
   ✓ Cleaner separation of concerns ✅
   ✓ Easier to debug, scale, and maintain ✅
   ✓ Follows industry best practices ✅

7. 📄 UI PAGES ✅
--------------------------------------------------------
• index.html       - Splash Screen (logo + auto-redirect to login.html) ✅
• login.html       - Login form (email/password) ✅
• signup.html      - Signup form (name/email/password) ✅
• dashboard.html   - Dashboard with: ✅
   ↳ My Trees section ⚠️ (Basic section exists, CRUD pending)
   ↳ Community Trees tab (future) ❌
   ↳ User Profile section (displays name, email, and join date) ✅

8. 🌳 TREE DATA MODEL ✅
--------------------------------------------------------
{
  id: "unique-id",
  name: "Neem Tree",
  location: "Campus Garden",
  date: "2025-07-09",
  createdBy: "user@example.com",
  public: true
} 

9. 🔮 FUTURE FEATURES ❌
--------------------------------------------------------
• Tree photo upload (Firebase Storage) ❌
• Geolocation auto-detect ❌
• Tree growth log & care reminders ❌
• Stats: adoption count, leaderboards ❌
• Badge system for achievements ❌
• Map view of all trees (Leaflet/Maps API) ❌

10. ✅ CURRENT STATUS
--------------------------------------------------------
🔧 In development: ✅
    - Frontend UI (basic structure and modularity) ✅
    - Splash Screen (`index.html`, `splash.js` - with timed redirect to login.html) ✅
    - User Signup (`signup.html`, `signup.js`) with LocalStorage ✅
    - User Login (`login.html`, `login.js`) with LocalStorage ✅
    - User Logout (via `dashboard.js`) ✅
    - Basic Dashboard display (`dashboard.html`, `dashboard.js` - user name and profile display) ✅
    - User Profile section on Dashboard (`dashboard.html`, `dashboard.js` - displays name, email, and join date) ✅

🔜 Next steps: ✅
    - Implement tree adoption (CRUD) functionalities in `dashboard.js` using LocalStorage. ⏳
    - Enhance UI/UX for user feedback (replace `alert()`s). ⏳
    - Implement robust input validation. ⏳
    - Integrate Firebase Authentication for secure user management. ⏳
    - Implement remaining functional requirements for the Dashboard and Community Feed. ⏳

========================================================